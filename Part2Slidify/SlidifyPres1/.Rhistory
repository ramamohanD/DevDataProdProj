x = c(5,3,0,4)
y=c(4,4,1,3)
x
y
x = c(5,3,0,4)
y=c(4,4,1,3)
h = theta0 + theta1*x;
x = c(5,3,0,4)
y=c(4,4,1,3)
h = theta0 + theta1*x;
theta1 = 1;
thetao = 0;
x = c(5,3,0,4)
y=c(4,4,1,3)
h = thetao + theta1*x;
h
theta1 = 1;
thetao = 0;
m=4;
x = c(5,3,0,4)
y=c(4,4,1,3)
h = thetao + theta1*x;
J = (1/2*m)*(h-y)^2
j
J
sum(J)
h
j
h = thetao + theta1*x;
j = (h-y)
y
h
j
j2=j^2
j2
j2=(1/(2*m))sum(j^2)
j2=(1/(2*m))*sum(j^2)
j2
u= c(3,-5,4)
v=c(1,2,5)'
u= c(3,-5,4)
v=t(c(1,2,5))
u
v
dim(u)
length(u)
?vector
u=as.vector(u)
u
dim(u)
u*v
u.*v
?matrix
is.matrix(as.matrix(1:10))
u= as.matrix(c(3,-5,4))
u
u= as.matrix(c(3,-5,4))
v=as.matrix(c(1,2,5))
u
v
res= t(u)*v
t(u)
utran = t(u)
utran
v
dim(utran)
dim(v)
?matrixmul
??matrixmul
res = utrans %*% v
res = utran %*% v
res
res
a = as.matrix(1:4,2,2)
z
a
a= as.matrix(1:4, ncol =2, nrow =2)
a= as.matrix(5:8, ncol =2, nrow =2)
res1 = (a %*% b) %*% (a)
res2 = (a) %*% (b %*% a)
a= as.matrix(1:4, ncol =2, nrow =2)
b= as.matrix(5:8, ncol =2, nrow =2)
res1 = (a %*% b) %*% (a)
res2 = (a) %*% (b %*% a)
a
b
a= matrix(1:4, ncol =2, nrow =2)
b= matrix(5:8, ncol =2, nrow =2)
res1 = (a %*% b) %*% (a)
res2 = (a) %*% (b %*% a)
res1
res2
a %*% b
b %*% a
u= as.matrix(c(3,-5,4))
v=as.matrix(c(1,2,5))
utran = t(u)
res = utran %*% v
res
theta1 = 1;
thetao = 0;
m=4;
x = c(3,1,0,4)
y=c(2,2,1,3)
h = thetao + theta1*x;
j = (h-y)
j2=(1/(2*m))*sum(j^2)
j2
u= as.matrix(c(3,-5,4))
v=as.matrix(c(1,2,5))
utran = t(u)
res = utran %*% v
res
a= matrix(1:4, ncol =2, nrow =2)
b= matrix(5:8, ncol =2, nrow =2)
res1 = (a %*% b) %*% (a)
res2 = (a) %*% (b %*% a)
res3 = (a %*% b %*% a)
res4 = (b%*% a %*% b)
res3
res4
swirl()
library(swirl)
swirl()
exit
quit
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summarize(tbl_df, mean(zise))
summarize(tbl_df, mean(siz))
summarize(tbl_df, mean(size))
summarize(by_package, mean(size))
submit()
reset()
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset(0)
reset()
submit(summarise)
submit(summarize1)
reset()
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset()
submit()
submit()
info()
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
select(pack_sum, count > 679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- unique(filter(pack_sum, count<465))
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(count))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
reset(0)
reset(0\)
reset()
info()
skip()
submit()
skip()
submit()
submit()
skip()
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(pack_sum, desc(count))
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(count))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
X=[11 24]
X=[11,24]
x=c(11,24)
x
P=c(.4472, .8944)
P=P''
P=P'
P=t(P)
P
X%*%P
x%*%P
=11*.4472+24*.8944
11*.4472+24*.8944
ans*.4472
(11*.4472+24*.8944)*.4472
exit
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
size(training)
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
dim(adData)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
dim(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(data(AlzheimerDisease))
head(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
plot(training$CompressiveStrength)
help cut2
help cut2()
cut2 ??
help cut2
install.packages("Hmisc")
help cut2
cut2(training, 20)
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
setwd("C:/Rama Mohan D/Learning/GitRepo/DevDataProdProj/Part2Slidify/")
ls
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
getwd
getwd()
setwd("C:/Rama Mohan D/Learning/GitRepo/DevDataProdProj/Part2Slidify/SlidifyPres1/")
library(slidify)
slidify("index.Rmd")
library(knitr)
browseURL('index.html')
publish(title = 'ShinyApp1', 'index.html', host = 'rpubs')
publish(user = "ramamohanD", repo = "DevDataProdProj")
publish(user = "ramamohanD", repo = "DevDataProdProj")
publish(title = 'ShinyApp1', 'index.html', host = 'rpubs')
